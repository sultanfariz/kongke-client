import { useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { makeStyles } from '@mui/styles';
import { TextField, Button, InputAdornment, IconButton, Typography, Box, Link as MaterialLink } from '@mui/material';
import { VisibilityOff, Visibility, Google } from '@mui/icons-material';
import { setCookie } from 'nookies';
import styles from '../../styles/Home.module.css';
import { BottomNav } from '../../src/components/navigation/BottomNav';
import { passwordValidation } from '../../src/utils/validation';
import { login } from '../../src/utils/fetchApi/auth';

const useStyles = makeStyles((theme) => ({
  root: {
    // width: '100%',
    // position: 'fixed',
    // bottom: 0,
    // right: 0,
    // left: 0,
    // display: 'flex',
    // zIndex: theme.zIndex.appBar,
    // backgroundColor: theme.palette.background.paper,
    // margin: '0 auto',

    // minHeight: '100vh',
    marginTop: '0',
    padding: '4rem 0',
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    width: '100%',
  },
  textField: {
    width: '100%',
  }
}));

export default function Login() {
  const classes = useStyles();
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState({
    username: '',
    password: '',
  });
  const [error, setError] = useState({
    username: {
      status: false,
      message: '',
    },
    password: {
      status: false,
      message: '',
    },
  });
  const [alert, setAlert] = useState({
    status: false,
    message: '',
  });

  const handleClickShowPassword = () => setShowPassword(!showPassword);

  const handleOnChange = (e) => {
    switch (e.target.name) {
      case 'username':
        setData({ ...data, username: e.target.value });
        break;
      case 'password':
        setData({ ...data, password: e.target.value });
        passwordValidation(e.target.value)
          ? setError({ ...error, password: { status: false, message: '' } })
          : setError({
            ...error,
            password: {
              status: true,
              message: 'password must be at least 6 char',
              // message: 'password must be at least 6 char contain number, lowercase and uppercase letter',
            },
          });
    }
  };

  const handleOnSubmit = async (e) => {
    e.preventDefault();
    if (data.username === '' || data.password == '') {
      setAlert({
        status: true,
        message: 'please fill all fields',
      });
    } else {
      const res = await login(setLoading, setAlert, data);
      console.log(res);
      // setCookie(null, 'token', res.data.data.token);
      // switch (res.status) {
      //   case 200:
      //     router.push('/superadmin/dashboard');
      //     break;
      //   default:
      //     break;
      // }
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        {/* <h1 className={styles.title}>
          Welcome to <a href='https://nextjs.org'>Kongke!</a>
        </h1> */}

        <p className={styles.description}>
          {/* Get started by editing <code className={styles.code}>pages/index.js</code> */}
          Login to your account
        </p>

        {/* <div className={styles.grid}> */}
        <div style={{
          // display: 'flex',
          width: '100%',
        }}>
          {/* <Box component='form' className={classes.loginForm} onSubmit={(e) => handleOnSubmit(e)}> */}
          <Box component='form'
            style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              width: '100%',
            }}
            onSubmit={(e) => handleOnSubmit(e)}>
            <TextField
              className={classes.textField}
              label='Username'
              name='username'
              path='text'
              fullWidth
              onChange={(e) => handleOnChange(e)}
              error={error.username.status}
              helperText={error.username.message}
            ></TextField>
            <br />
            <TextField
              className={classes.textField}
              label='Password'
              name='password'
              value={data.password}
              type={showPassword ? 'text' : 'password'}
              fullWidth
              onChange={(e) => handleOnChange(e)}
              error={error.password.status}
              helperText={error.password.message}
              InputProps={{
                endAdornment: (
                  <InputAdornment position='end'>
                    <IconButton onClick={handleClickShowPassword}>
                      {showPassword ? <Visibility /> : <VisibilityOff />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            ></TextField>
            <br />
            <Button type='submit' variant='contained' className={classes.button}>
              Login
            </Button>
          </Box>
          <Typography variant='body2' color='textSecondary' align='right' style={{ marginTop: '1rem' }}>
            {'Forgot password? '}
            <MaterialLink href='/account/forgot-password'>Reset Password</MaterialLink>
          </Typography>
          <Typography variant='body2' color='textSecondary' align='center' style={{ marginTop: '3rem' }}>
            Have no account? <MaterialLink href='/account/register'>Register</MaterialLink>
          </Typography>
        </div>
      </main>

      <BottomNav label='Account' />
    </div>
  );
}
