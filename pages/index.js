import { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import { Box, TextField, Button } from '@mui/material';
import { makeStyles } from '@mui/styles';
import moment from 'moment';
import styles from '../styles/Home.module.css';
import { BottomNav } from '../src/components/navigation/BottomNav';
import { jwtDecode, getJwt } from '../src/utils/jwt';
import Forbidden from '../src/components/pages/Forbidden';
import { socketInit } from '../src/utils/socket/index';

const useStyles = makeStyles((theme) => ({
  root: {
    marginTop: '0',
    padding: '4rem 0',
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {},
  textField: {
    marginRight: '1rem',
  },
  chatbox: {
    width: '100%',
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'start',
    justifyContent: 'center',
    border: '3px solid #ccc',
    borderRadius: '4px',
    marginTop: '1rem',
    marginBottom: '5rem',
    padding: '1rem',
  },
  chatForm: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '464px',
    position: 'fixed',
    bottom: '76px',
    backgroundColor: '#fff',
    paddingTop: '0.75rem',
  },
  chat: {
    margin: '0.25rem 0',
    backgroundColor: theme.palette.secondary.main,
    color: '#eee',
    padding: '0 0.5rem',
    borderRadius: '20px 20px 20px 0 ',
    fontSize: '0.75rem',
    maxWidth: '80%',
  },
  chatUsername: {
    width: "100%",
    marginBottom: "0.5rem",
    fontWeight: "bold",
    fontSize: "13px",
  },
  chatBalloon: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'start',
    margin: '0',
  },
  userChat: {
    margin: '0.25rem 0',
    maxWidth: '80%',
    backgroundColor: 'rgba(98, 0, 238, 0.8)',
    color: '#eee',
    padding: '0 0.5rem',
    borderRadius: '20px 20px 0 20px',
    fontSize: '0.75rem',
  },
  userChatDate: {
    margin: "0.5rem",
    fontSize: "8px",
    textAlign: "right",
    itemAlign: "end"
  },
  userChatBalloon: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'end',
    width: '100%',
    margin: '0',
  },
}));

export default function Home() {
  const classes = useStyles();
  const chatboxEnd = useRef(null);
  const [socket, setSocket] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState({});
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState({
    user: user?.username,
    text: '',
  });

  useEffect(() => {
    const { id, username } = jwtDecode();
    if (!id) setIsAuthenticated(false);
    else {
      const jwt = getJwt();
      setUser({ id, username });
      setMessage({ user: username, text: '' });
      setIsAuthenticated(true);
      socketInit(setSocket, jwt);
    }
  }, []);

  useEffect(() => {
    socket?.on('chat', (data) => {
      setMessages((prevState) => [...prevState, data]);
    });
  }, [socket]);

  useEffect(() => {
    chatboxEnd.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const sendMessage = (e) => {
    e.preventDefault();
    socket.emit('chat', message);
    setMessage({ ...message, text: '' });
  };

  return (
    <div className={styles.container}>
      {!isAuthenticated ? (
        <Forbidden />
      ) : (
        <>
          <Head>
            <title>Kongke</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
          </Head>
          <main className={styles.main}>
            <h1 className={styles.title}>
              Welcome to <a href='https://kongke.vercel.app'>Kongke!</a>
            </h1>
            {/* chatbox */}
            <Box className={classes.chatbox}>
              {messages.map((message, index) => (
                message.user === user.username ? (
                  <Box key={index} className={classes.userChatBalloon}>
                    <Box className={classes.userChat}>
                      <p style={{ margin: "0.5rem" }}>{message.text}</p>
                      <p className={classes.userChatDate}>{moment(message.date).format('dddd MMMM Do YYYY, h:mm a')}</p>
                    </Box>
                  </Box>
                ) : (
                  <Box key={index} className={classes.chatBalloon}>
                    <Box className={classes.chat}>
                      <Box className={classes.chatUsername}>
                        <p style={{ margin: "0.5rem 0.1rem" }}>{`${message.user}`}</p>
                      </Box>
                      <p style={{ margin: "0.5rem 0.1rem" }}>{message.text}</p>
                      <p style={{ margin: "0.5rem 0.1rem", fontSize: "8px" }}>{moment(message.date).format('dddd MMMM Do YYYY, h:mm a')}</p>
                    </Box>
                  </Box>
                )
              ))}
              <div ref={chatboxEnd}></div>
            </Box>
            <form className={classes.chatForm} onSubmit={sendMessage}>
              <TextField
                className={classes.textField}
                label='Type your message here'
                name='chat'
                path='text'
                fullWidth
                value={message.text}
                onChange={(e) => setMessage({ ...message, text: e.target.value })}
              ></TextField>
              <Button type='submit' variant='contained' className={classes.button}>
                Send
              </Button>
            </form>
          </main>
        </>
      )}
      <BottomNav label='Home' />
    </div >
  );
}
